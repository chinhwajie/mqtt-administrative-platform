type Iot {
    iotId: String
    name: String
    info: String
    topics: [Topic]
    messages: [Message]
    category: Category
    createTime: String
    connectionState: Boolean
}

type Topic {
    iot: Iot
    topic: String
    connectionState: Boolean
}

type Message {
    id: Int
    topic: String
    alert: Boolean
    payload: String
    createTime: String
    iot: Iot
}
enum Category {
    MOBILE,
    DEFAULT
}
type CountDistinctTopic {
    count: Int
    topic: String
}

type CountIotGroupByCategory {
    count: Int
    category: Category
}

type MessageCountPerDay {
    messageCount: Int
    date: String
}

type IotTrace {
    iot: Iot
    coordinates: [[Float]]
}

type Query {
    getAllIotTraces: [IotTrace]
    complexIotSearch(categories: [Category], type: String, typeValue: String, status: String, sDate: String, eDate: String): [Iot]
    getAvailableCategories: [Category]
    searchMessages(type: String, value: String): [Message]
    getActiveListeningConnection: Int
    latestNDaysMessagesCountTrend(n: Int): [MessageCountPerDay]
    getTotalMessagesCount: Int
    getIotsCount: Int
    getAllIots: [Iot]
    getIot(iotId: String): Iot
    getTopicsByIotId(iotId: String): [Topic]
    getCountIotGroupByCategory: [CountIotGroupByCategory]
    countDistinctTopic: [CountDistinctTopic]
    getMessagesByIotId(iotId: String): [Message]
    getMessagesByIotCategory(iotCategory: Category): [Message]

}

type Mutation {
    createIot(iotId: String,iotName: String,info: String,iotCategory: Category,): Iot
    createFullIot(iotId: String,iotName: String,info: String,iotCategory: Category, topics: [String]): Iot
    updateFullIot(iotId: String,iotName: String,info: String,iotCategory: Category, topics: [String]): Iot
    deleteIot(iotId: String): Iot
    createTopic(iotId: String,topicName: String): Iot
    deleteTopic(iotId: String,topicName: String): Iot
    deleteMessage(messageId: Int): Message
}